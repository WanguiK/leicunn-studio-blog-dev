# Generated by Django 3.0.5 on 2020-04-16 23:28

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(db_index=True, max_length=50, primary_key=True, serialize=False, unique=True, verbose_name='Username')),
                ('position', models.CharField(max_length=100, null=True, verbose_name='Position')),
                ('location', models.CharField(max_length=50, null=True, verbose_name='Location')),
                ('website', models.URLField(default='https://www.leicunnstudio.com', max_length=100)),
                ('twitter', models.URLField(default='https://www.twitter.com', max_length=100, verbose_name='Twitter')),
                ('instagram', models.URLField(default='https://www.instagram.com', max_length=100, verbose_name='Instagram')),
                ('linkedin', models.URLField(default='https://www.linkedin.com', max_length=100, verbose_name='Linkedin')),
                ('description', models.CharField(default='Write A Personal Statement', help_text='* Required: 280 Characters', max_length=280, verbose_name='About Me')),
                ('article', models.TextField(default='I am a writer at Leicunn Studio Blog.', help_text='* Required', verbose_name='Write An Article About Yourself')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(help_text='Less than 100 characters', max_length=100)),
                ('description', models.TextField(help_text='* required. Describe the content of the content in this category', max_length=280, verbose_name='Description')),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('author', models.ForeignKey(default='Anonymous', on_delete=django.db.models.deletion.SET_DEFAULT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(help_text='* Required. Maximum 120 Characters', max_length=120, verbose_name='Media Description')),
                ('slug', models.SlugField(unique=True)),
                ('type', models.CharField(choices=[('Profile', 'Profile'), ('Cover', 'Cover')], default='Cover', help_text='* Required', max_length=7, verbose_name='Media Type')),
                ('image', models.ImageField(blank=True, upload_to='images/', verbose_name='Image')),
                ('status', models.CharField(default='0', max_length=1)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(default='Anonymous', on_delete=django.db.models.deletion.SET_DEFAULT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='* Required. Maximum 120 Characters', max_length=120, verbose_name='The Title')),
                ('summary', models.CharField(help_text='* Required. Write a tweet sized TL;DR summary', max_length=280)),
                ('article', models.TextField(help_text='* Required', verbose_name='Write The Article')),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('In Review', 'In Review'), ('Published', 'Published'), ('Rejected', 'Rejected'), ('Archived', 'Archived')], default='Draft', help_text='* Required', max_length=9)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('slug', models.SlugField(unique=True)),
                ('author', models.ForeignKey(default='Anonymous', on_delete=django.db.models.deletion.SET_DEFAULT, to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(default='1', on_delete=django.db.models.deletion.PROTECT, to='blog.Category')),
                ('cover', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='blog.Media')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags for the post', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ['updated'],
            },
        ),
        migrations.AddField(
            model_name='author',
            name='image',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='Media', to='blog.Media'),
        ),
        migrations.AddField(
            model_name='author',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
